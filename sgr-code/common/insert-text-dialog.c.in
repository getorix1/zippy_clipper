/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#+
#+     Internet Radio Automation & Encoding Toolkit
#+
#+     Copyright (C) 2018, 2019, 2020, 2021, 2022, 2023 
#+     by Kevin C. O'Kane
#+
#+     Kevin C. O'Kane
#+     kc.okane@gmail.com
#+     https://www.cs.uni.edu/~okane
#+     https://threadsafebooks.com/
#+
#+ This program is free software; you can redistribute it and/or modify
#+ it under the terms of the GNU General Public License as published by
#+ the Free Software Foundation; either version 2 of the License, or
#+ (at your option) any later version.
#+
#+ This program is distributed in the hope that it will be useful,
#+ but WITHOUT ANY WARRANTY; without even the implied warranty of
#+ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#+ GNU General Public License for more details.
#+
#+ You should have received a copy of the GNU General Public License
#+ along with this program; if not, write to the Free Software
#+ Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#+
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/

//	Nov 2, 2023

#include "includes.h"
#include "defines.h"
#include "common-externs.h"
#include "common-fcn-headers.h"


#include <vlc/libvlc.h>
#include <vlc/libvlc_renderer_discoverer.h>
#include <vlc/libvlc_media.h>
#include <vlc/libvlc_media_player.h>

#define SLASH '/'


void    on_dxb9_clicked(GtkButton *b) { // ok button for text box

	gtk_widget_hide(text_frame);
	gtk_widget_hide(text_fixed);
	gtk_widget_hide(g_dbox5);

	close_boxes();

	const gchar *sentry = gtk_entry_get_text( g_dbox5Entry );

	if (strlen(sentry) == 0) {
		Message("Invalid response");
		zippy_says("Invalid response.\n");
		return;
		}

	int i, j, k, pcount = 0;

	gdouble b_trans =  gtk_adjustment_get_value(adjustment13); // text_size
	gdouble start =  gtk_adjustment_get_value(adjustment14); // text_start
	gdouble end =  gtk_adjustment_get_value(adjustment15); // text_end
	gdouble size =  gtk_adjustment_get_value(adjustment16); // text_size
	GdkRGBA rgba;
	gtk_color_button_get_rgba(text_color, &rgba);
	GdkRGBA back_rgba;
	gtk_color_button_get_rgba(back_color, &back_rgba);

	gtk_widget_hide(g_dbox5);

	char tmp[16000], filename[4096], filetype[256];
	time_t tmark = time(0);

	char scale[16000];

	for (i = 0; i < (SP->scount); i++) {

		if (programData[i]->play) {

			programData[i]->play = 0;

			pcount++;

//------------------------------------------------------------------
//	ffmpeg -i input.@FMT@ -vf scale=320:240,setsar=1:1 output.@FMT@
//------------------------------------------------------------------

			if (gtk_toggle_button_get_active(vid_640x480))
				strcpy(scale, "640x480");

			if (gtk_toggle_button_get_active(vid_720x480))
				strcpy(scale, "720x480");

			if (gtk_toggle_button_get_active(vid_1280x720))
				strcpy(scale, "1280x720");

			if (gtk_toggle_button_get_active(vid_1920x1080))
				strcpy(scale, "1920x1080");

			if (gtk_toggle_button_get_active(vid_3840x2160))
				strcpy(scale, "3840x2160");

			new_name(filename, ProgramArray[i], "txt");

			sprintf(tmp, "ffmpeg -y -loglevel info -i \"%s\" -vf fps=@FPS@,"
				"\"drawtext=text=\'%s\':font=\'Times New Roman\':"
				"x=%d:y=%d:fontsize=%d:fontcolor=#%02x%02x%02x:box=1:"
				"boxcolor=#%02x%02x%02x@%.1f:bordercolor=#%02x%02x%02x@%.1f:"
				"boxborderw=10\" @LOSS@ \"%s\"",

                		ProgramArray[i], sentry, (int) start, (int) end, (int) size, 

				(int) (rgba.red * 255), (int) (rgba.green * 255),  
					(int) (rgba.blue * 255), 

				(int) (back_rgba.red * 255), 
					(int) (back_rgba.green * 255),  
					(int) (back_rgba.blue * 255),  // box color

				(int) (back_rgba.red * 255), 
					(int) (back_rgba.green * 255),  
					(int) (back_rgba.blue * 255), // border color

				b_trans, 
				filename);

			int err_stat = ff_run("Text", tmp, i);

			if (err_stat != 0) {
				zippy_says("An error occurred\n");
				sprintf(tmp, "rm \"%s\"", filename);
				system(tmp);
				return;
				}

			printf("Created: %s\n\n", filename);

			}
		}


	if (!pcount) {
		zippy_says("No files selected.\n");
		}


        gtk_widget_hide(run_result);
        gtk_widget_hide(dismiss_zippy_says);


        clear_play();

        on_scan_video_dir_clicked(NULL);

	}


void    on_dxb10_clicked(GtkButton *b) { // cancel button
	gtk_widget_hide(text_frame);
	gtk_widget_hide(text_fixed);
	gtk_widget_hide(g_dbox5);
	}



void    on_insert_text_clicked(GtkWidget *w) {
        gint x, y, width, height;

        if (mediaPlayer == NULL) {
                zippy_says("No media player currently in use.\n");
                return;
                }

	vlc_pause();

        int err = libvlc_video_get_size (mediaPlayer, 0, &width, &height);

	if (width > 1900) text_scale = 4;
	else if (width > 1200) text_scale = 3;
	else text_scale = 2;

	width = width / text_scale;
	height = height / text_scale;

        if (err != 0) {
                zippy_says("Unable to determine video dimensions.\n");
                return;
                }

        gtk_widget_show(text_frame);  
        gtk_window_move(GTK_APPLICATION_WINDOW(text_frame), 200, 200);
        gtk_window_resize(GTK_WINDOW(text_frame), width, height);

	GdkColor frames;

	frames.red       = 0x3333;
	frames.green     = 0x3333;
	frames.blue      = 0x3333;

	gtk_widget_modify_bg(text_image, GTK_STATE_NORMAL, &frames);

	text_x = text_y = 1;
	gtk_spin_button_set_value (GTK_SPIN_BUTTON(text_start), 1.0);
	gtk_spin_button_set_value (GTK_SPIN_BUTTON(text_end), 1.0);

	gtk_fixed_move (GTK_FIXED(text_fixed), text_image, text_x, text_y);

        gtk_window_set_title(GTK_WINDOW(g_dbox5),"Enter text:");
        gtk_widget_show(g_dbox5);  // show dialog
	gtk_window_set_keep_above(GTK_WINDOW(g_dbox5), TRUE);
	gtk_widget_show(text_fixed);

        }


void    on_text_end_value_changed(GtkSpinButton *s) {
        text_y = gtk_spin_button_get_value(s) / text_scale;
        gtk_fixed_move (GTK_FIXED(text_fixed), text_image, text_x, text_y);
        }

void    on_text_start_value_changed(GtkSpinButton *s) {
        text_x = gtk_spin_button_get_value(s) / text_scale;
        gtk_fixed_move (GTK_FIXED(text_fixed), text_image, text_x, text_y);
        }



