/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#+
#+     Internet Radio Automation & Encoding Toolkit
#+
#+     Copyright (C) 2018, 2019, 2020, 2021, 2022, 2023 
#+     by Kevin C. O'Kane
#+
#+     Kevin C. O'Kane
#+     kc.okane@gmail.com
#+     https://www.cs.uni.edu/~okane
#+     https://threadsafebooks.com/
#+
#+ This program is free software; you can redistribute it and/or modify
#+ it under the terms of the GNU General Public License as published by
#+ the Free Software Foundation; either version 2 of the License, or
#+ (at your option) any later version.
#+
#+ This program is distributed in the hope that it will be useful,
#+ but WITHOUT ANY WARRANTY; without even the implied warranty of
#+ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#+ GNU General Public License for more details.
#+
#+ You should have received a copy of the GNU General Public License
#+ along with this program; if not, write to the Free Software
#+ Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#+
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/

//	August 10, 2024

#include "includes.h"
#include "defines.h"
#include "common-externs.h"
#include "common-fcn-headers.h"

#include <vlc/libvlc.h>
#include <vlc/libvlc_renderer_discoverer.h>
#include <vlc/libvlc_media.h>
#include <vlc/libvlc_media_player.h>

#define SLASH '/'

//---------------------------------------
//	Show message with Dismiss button
//---------------------------------------

void	zippy_says(char *msg) {

	TextBuffer = gtk_text_view_get_buffer (GTK_TEXT_VIEW(dbox4_tv));

	GtkTextIter it;

	gtk_text_buffer_get_end_iter (TextBuffer, &it);

	gtk_text_buffer_insert (TextBuffer, &it, msg, -1);

	gtk_window_set_title(GTK_WINDOW(g_dbox4),"Zippy Says");

	GtkAdjustment* wa = gtk_scrolled_window_get_vadjustment (GTK_SCROLLED_WINDOW(dbox4_sw));
	gdouble upper = gtk_adjustment_get_upper (wa);
	gtk_adjustment_set_value (wa, upper);

	char msg1[16000];
	msg1[0] = '\n';
	strncpy(&msg1[1], msg, 15999);

	gtk_label_set_text(GTK_LABEL(run_result), msg1);
	gtk_widget_show(run_result);

	gtk_widget_show(dismiss_zippy_says);

	while (gtk_events_pending()) gtk_main_iteration(); // force it

	printf("zippy_says(): %s\n", msg);
	}


void	on_dismiss_zippy_says_clicked(GtkWidget *w) {
	gtk_widget_hide(run_result);
	gtk_widget_hide(dismiss_zippy_says);
	}

void	zippy_says1(char *msg) {

	TextBuffer = gtk_text_view_get_buffer (GTK_TEXT_VIEW(dbox4_tv));

	GtkTextIter it;

	gtk_text_buffer_get_end_iter (TextBuffer, &it);

	gtk_text_buffer_insert (TextBuffer, &it, msg, -1);

	gtk_window_set_title(GTK_WINDOW(g_dbox4),"Zippy Says");

	GtkAdjustment* wa = gtk_scrolled_window_get_vadjustment (GTK_SCROLLED_WINDOW(dbox4_sw));
	gdouble upper = gtk_adjustment_get_upper (wa);
	gtk_adjustment_set_value (wa, upper);

	char msg1[16000];
	msg1[0] = '\n';
	strncpy(&msg1[1], msg, 15999);

	gtk_label_set_text(GTK_LABEL(run_result), msg1);

	gtk_widget_show(run_result);

	while (gtk_events_pending()) gtk_main_iteration(); // force it

	printf("zippy_says(): %s\n", msg);
	}
