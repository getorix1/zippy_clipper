/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#+
#+     Internet Radio Automation & Encoding Toolkit
#+
#+     Copyright (C) 2018, 2019, 2020, 2021, 2022, 2023, 2024
#+     by Kevin C. O'Kane
#+
#+     Kevin C. O'Kane
#+     kc.okane@gmail.com
#+     https://www.cs.uni.edu/~okane
#+     https://threadsafebooks.com/
#+
#+ This program is free software; you can redistribute it and/or modify
#+ it under the terms of the GNU General Public License as published by
#+ the Free Software Foundation; either version 2 of the License, or
#+ (at your option) any later version.
#+
#+ This program is distributed in the hope that it will be useful,
#+ but WITHOUT ANY WARRANTY; without even the implied warranty of
#+ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#+ GNU General Public License for more details.
#+
#+ You should have received a copy of the GNU General Public License
#+ along with this program; if not, write to the Free Software
#+ Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#+
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/

//	August 11, 2024

#include "includes.h"
#include "defines.h"
#include "common-externs.h"
#include "common-fcn-headers.h"


#include <vlc/libvlc.h>
#include <vlc/libvlc_renderer_discoverer.h>
#include <vlc/libvlc_media.h>
#include <vlc/libvlc_media_player.h>

#define SLASH '/'

void    overlay_vid(int);

void    on_overlay_preview_clicked(GtkButton *b) { // ok button dbx9

	gtk_widget_hide(overlay_box);
	gtk_widget_hide(text_frame);

	while (gtk_events_pending ()) gtk_main_iteration ();

	overlay_vid(1);

	}


void    on_overlay_ok_clicked(GtkButton *b) { // ok button dbx9

	gtk_widget_hide(overlay_box);

	overlay_vid(0);

	}


void    on_overlay_cancel_clicked(GtkButton *b) { // cancel button
	gtk_widget_hide(text_frame);
	gtk_widget_hide(overlay_box);
	}


void    on_overlay_clip_clicked(GtkWidget *w) {	// open overlay box

	close_boxes();

	gtk_widget_show(overlay_box);

	gtk_toggle_button_set_active(GTK_TOGGLE_BUTTON(frame_next), TRUE);

        gtk_window_set_title(GTK_WINDOW(overlay_box),"Overlay Settings");
        gtk_widget_show(overlay_box);  // show dialog
	gtk_window_set_keep_above(GTK_WINDOW(overlay_box), TRUE);

        }

void	on_OverlayEntry1_insert_text(GtkEditable  *entry, gchar *edit) { 


                int i = gtk_entry_get_text_length (GTK_ENTRY(entry)); 
                if (i > STR_MAX) { Message("Entry Error"); return; } 

		if (strcmp(past1, edit) == 0 &&
			copyClipRow == past_row1) return;

		strcpy(past1, edit);
		past_row1 = copyClipRow;

		gtk_editable_delete_text (entry,0,-1);

		if ((filetype(ProgramArray[past_row1])) < 100) {
			gtk_widget_hide(overlay_end);
			gtk_widget_hide(overlay_end_lbl);
			}
		else {
			gtk_widget_show(overlay_end);
			gtk_widget_show(overlay_end_lbl);
			}

		return;
		}

void	on_OverlayEntry2_insert_text(GtkEditable  *entry, gchar *edit) { 

	int i = gtk_entry_get_text_length (GTK_ENTRY(entry)); 
	if (i > STR_MAX) { Message("Entry Error"); return; } 

	if (strcmp(past2, edit) == 0 &&
		copyClipRow == past_row2) return;

	strcpy(past2, edit);
	past_row2 = copyClipRow;

	gtk_editable_delete_text (entry,0,-1);

	if ((filetype(ProgramArray[past_row2])) >= 100) {
		zippy_says("Must be a video format clip.\n");
		}

	printf("Duration of second overlay entry %d %s\n", 
		i = (int)(GetTime(ProgramArray[past_row2]) + 0.5) );

	gtk_adjustment_set_value(adjustment33, (double) i ); // set end time

	return;
	}


//-----------------
//	OVERLAY CLIP
//-----------------

// overlay still
// overlay transparent still

void    overlay_vid(int preview) {

	char tmp[16000];
	char tmp1[16000];
	int i, j, k;

	close_boxes();

	if (!gtk_toggle_button_get_active(frame_next)) 	// pause
			gtk_toggle_button_set_active(frame_next, TRUE);

//-------------------------------------------------
//	past1 is item being overlayed onto past2
//-------------------------------------------------

	if (past_row1 < 0 || past_row2 < 0 ||
		past_row1 > SP->scount || past_row2 > SP->scount) {

		zippy_says("Files not specified.\n");
		return;
		}

	printf("Overlay %s onto \n\t%s\n", 
		ProgramArray[past_row1], ProgramArray[past_row2]);

	for (i = strlen(ProgramArray[past_row2]); i > 0; i--) {
		if (ProgramArray[past_row2][i] == '.') break;
		}
		
	if (i == 0) strcpy(tmp1, "out.@FMT@");

	else {
		tmp1[i--] = 0;
		for (j = i; j >= 0; j--)
			tmp1[j] = ProgramArray[past_row2][j]; 
		}

	char new[16000];

	new_name(new, ProgramArray[past_row2], "ovl");

//---------------------------------------------------------------------------
//	"taskset -c 0,1,2,3 ffmpeg -y -loglevel info -ss %d -i \"%s\" "
//	limit cpu time to keep from over heating. numbers are cpu core nbrs.
//---------------------------------------------------------------------------

	if (filetype(ProgramArray[past_row1]) < 100 ) {

		sprintf(tmp,
	
			"ffmpeg -y -loglevel info -i \"%s\" -itsoffset %d -i \"%s\" "
			" -filter_complex \"[0:0]setpts=PTS-STARTPTS[a]; "
 			"[a][1:0]overlay=enable='gte(t,1):eof_action=pass:x=%d:y=%d'[out1]; "
 			"[out1]fps=@FPS@[out]\" -map [out] -map 0:1"
 			" -pix_fmt yuv420p "
 			" -c:a copy @LOSS@ ",
	
			ProgramArray[past_row2], 
			clip_start, 
			ProgramArray[past_row1], 
			clip_x_coord, 
			clip_y_coord);

			}

	else {

		sprintf(tmp,
	
			"ffmpeg -y -loglevel info -i \"%s\" -i \"%s\" "
			" -filter_complex \"[0:v][1:v]overlay=enable="
			"'between(t,%d,%d):x=%d:y=%d'\" -vcodec libx264 @LOSS@  ", 
	
			ProgramArray[past_row2], 
			ProgramArray[past_row1], 
			clip_start, 
			clip_end,
			clip_x_coord, 
			clip_y_coord);

			}


	if (preview) {
		strcat(tmp, " -f rawvideo - | ffplay - -x 640 -y 480 -autoexit &");

		preview_run(tmp);

		return;
		}

	strcat(tmp, " \"");
	strcat(tmp, new);
	strcat(tmp, "\"");

	int err_stat = ff_run("Overlay", tmp, -1);

	if (err_stat != 0) {
		zippy_says("An error occurred\n");
		return;
		}

	printf("Created: %s\n\n", new);


        gtk_widget_hide(run_result);
        gtk_widget_hide(dismiss_zippy_says);


        clear_play();

        on_scan_video_dir_clicked(NULL);


        }

void    on_clip_x_value_changed(GtkSpinButton *r) {

	gdouble x = gtk_spin_button_get_value (r);

	clip_x_coord = x;

	}

void    on_clip_y_value_changed(GtkSpinButton *r) {

	gdouble x = gtk_spin_button_get_value (r);

	clip_y_coord = x;

	}

void    on_start_value_changed(GtkSpinButton *r) {

	gdouble x = gtk_spin_button_get_value (r);

	clip_start = x;

	}

void    on_end_value_changed(GtkSpinButton *r) {

	gdouble x = gtk_spin_button_get_value (r);

	clip_end = x;

	}


