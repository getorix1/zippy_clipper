/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#+
#+     Internet Radio Automation & Encoding Toolkit
#+
#+     Copyright (C) 2018, 2019, 2020, 2021, 2022, 2023, 2024
#+     by Kevin C. O'Kane
#+
#+     Kevin C. O'Kane
#+     kc.okane@gmail.com
#+     https://www.cs.uni.edu/~okane
#+     https://threadsafebooks.com/
#+
#+ This program is free software; you can redistribute it and/or modify
#+ it under the terms of the GNU General Public License as published by
#+ the Free Software Foundation; either version 2 of the License, or
#+ (at your option) any later version.
#+
#+ This program is distributed in the hope that it will be useful,
#+ but WITHOUT ANY WARRANTY; without even the implied warranty of
#+ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#+ GNU General Public License for more details.
#+
#+ You should have received a copy of the GNU General Public License
#+ along with this program; if not, write to the Free Software
#+ Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#+
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/

//	August 10, 2024

#include "includes.h"
#include "defines.h"
#include "common-externs.h"
#include "common-fcn-headers.h"


#include <vlc/libvlc.h>
#include <vlc/libvlc_renderer_discoverer.h>
#include <vlc/libvlc_media.h>
#include <vlc/libvlc_media_player.h>

#define SLASH '/'

void    overlay_vid(int);

void    on_ffmpeg_preview_clicked(GtkButton *b) { // ok button dbx9

	gtk_widget_hide(overlay_box);
	gtk_widget_hide(text_frame);

	while (gtk_events_pending ()) gtk_main_iteration ();

	ffmpeg_vid(1);

	}


void    on_ffmpeg_ok_clicked(GtkButton *b) { // ok button dbx9

	gtk_widget_hide(overlay_box);

	ffmpeg_vid(0);

	}


void	on_OverlayEntry3_insert_text(GtkEditable  *entry, gchar *edit) { 

	int i = gtk_entry_get_text_length (GTK_ENTRY(entry)); 
	if (i > STR_MAX) { Message("Entry Error"); return; } 

	gchar *txt = gtk_entry_get_text(GTK_ENTRY(entry));

	return;
	}


void    ffmpeg_vid(int pflag) {

	char tmp[16000], filename[4096];
	int i, j, k, pcount = 0;

	close_boxes();

	int el = gtk_entry_get_text_length (GTK_ENTRY(OverlayEntry3)); 
	if (el > STR_MAX) { Message("Entry Error"); return; } 

	gchar *txt = gtk_entry_get_text(GTK_ENTRY(OverlayEntry3));

	char filter[4096];

	if (el > 0) strcpy(filter, txt);
	else strcpy(filter, " -c:v libx264 ");

	for (i = 0; i < (SP->scount); i++) {

		if (programData[i]->play) {

			pcount++;

                        if (pflag == 1) {

			sprintf(tmp, "ffmpeg -y -loglevel info -i \"%s\" "
				" %s  -f rawvideo - | ffplay - -x 640 -y 480 -autoexit &",
                		ProgramArray[i], filter);

			preview_run(tmp);


                        return;

                        }

			programData[i]->play = 0;

			new_name(filename, ProgramArray[i], "user");

			sprintf(tmp, "ffmpeg -y -loglevel info -i \"%s\" "
				"%s \"%s\"",
                		ProgramArray[i], txt, filename);

			int err_stat = ff_run("user", tmp, i);

		if (err_stat != 0) {
			zippy_says("An error occurred\n");
			sprintf(tmp, "rm \"%s\"", filename);
			return;
			}

			printf("Created: %s\n\n", filename);

			}
		}


	if (!pcount) {
		zippy_says("No files selected.\n");
		}


        gtk_widget_hide(run_result);
        gtk_widget_hide(dismiss_zippy_says);


        clear_play();

        on_scan_video_dir_clicked(NULL);

	}

