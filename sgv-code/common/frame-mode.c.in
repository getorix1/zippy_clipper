/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#+
#+     Internet Radio Automation & Encoding Toolkit
#+
#+     Copyright (C) 2018, 2019, 2020, 2021, 2022, 2023, 2024
#+     by Kevin C. O'Kane
#+
#+     Kevin C. O'Kane
#+     kc.okane@gmail.com
#+     https://www.cs.uni.edu/~okane
#+     https://threadsafebooks.com/
#+
#+ This program is free software; you can redistribute it and/or modify
#+ it under the terms of the GNU General Public License as published by
#+ the Free Software Foundation; either version 2 of the License, or
#+ (at your option) any later version.
#+
#+ This program is distributed in the hope that it will be useful,
#+ but WITHOUT ANY WARRANTY; without even the implied warranty of
#+ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#+ GNU General Public License for more details.
#+
#+ You should have received a copy of the GNU General Public License
#+ along with this program; if not, write to the Free Software
#+ Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#+
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/

//	July 8, 2024

#include "includes.h"
#include "common-externs.h"
#define SLASH '/'

void	on_frame_next_toggled(GtkWidget *w) {

	if (!mediaPlayer) { // fail
		if(gtk_toggle_button_get_active(GTK_TOGGLE_BUTTON(frame_next)))
			gtk_toggle_button_set_active(GTK_TOGGLE_BUTTON(frame_next), FALSE);
		return;
		}

	if (!gtk_toggle_button_get_active(GTK_TOGGLE_BUTTON(frame_next))) { // resume play

		#ifdef VLC4
			libvlc_media_player_set_time(mediaPlayer, t_position, FALSE);
		#else
			libvlc_media_player_set_time(mediaPlayer, t_position);
		#endif

		gtk_widget_hide(sel1);
		gtk_widget_hide(sel2);
		gtk_widget_hide(sel3);
		gtk_widget_hide(sel4);

		gtk_widget_hide(esel1);
		gtk_widget_hide(esel2);
		gtk_widget_hide(esel3);
		gtk_widget_hide(esel4);

		gtk_widget_hide(flbl1);
		gtk_widget_hide(flbl2);
		gtk_widget_hide(flbl3);
		gtk_widget_hide(flbl4);

		gtk_widget_hide(frame_image);
		gtk_widget_hide(frame_image1);
		gtk_widget_hide(frame_image2);
		gtk_widget_hide(frame_image3);
		gtk_widget_hide(frame_image4);

		gtk_widget_show(drawV);

	        libvlc_media_player_set_pause(mediaPlayer, NOPAUSE); // play

		return;
		}

//------------
//	pause
//------------

        libvlc_media_player_set_pause(mediaPlayer, PAUSE); // pause

	t_position = libvlc_media_player_get_time(mediaPlayer);

	frame_display();

	return;
	}


int     albumImage(GtkWidget *image, char * file, int width, int height) {

        char fileName[4096];

        strcpy(fileName, file);

        showImage(image, fileName, width, height);

        return 1;

        }


#define SLIDE_IMAGE_WIDTH 720    // slide size
#define SLIDE_IMAGE_HEIGHT 480

int     showImage(GtkWidget *image, char * file, int width, int height) {

        char tmp1[2048], cmd[2048];
        int j,k,h,h1,v,v1,tmpFlg=0;
        FILE *f1, *p1;
        char fileName[4096] = {0};
        int ver, hor;

        strcpy(fileName, file);

        err = NULL;

        pixbuf = gdk_pixbuf_new_from_file_at_scale
               (fileName, width, height, TRUE, &err);

	if (!pixbuf) {
    		g_printerr("%s\n", err->message);
    		g_error_free(err);
		return 1;
		}

        float pwidth = gdk_pixbuf_get_width(pixbuf);
        float pheight = gdk_pixbuf_get_height(pixbuf);

	gtk_image_set_from_pixbuf(GTK_IMAGE(image), pixbuf);

	gtk_widget_hide(drawV);
        gtk_widget_show(image);

        g_object_unref(pixbuf); /* no longer needed - free it */

	gint horx, verx, winheight, winwidth;

	winwidth = SLIDE_IMAGE_WIDTH;
	winheight = SLIDE_IMAGE_HEIGHT;

	horx = (winwidth) / 2.0 - (pwidth / 2.0);
	verx = (winheight) / 2.0 - (pheight / 2.0);

	if (verx < 0 ) verx = 0;
	if (horx < 0 ) horx = 0;

	horx = horx + 150;
	verx = verx + 100;

        return 1;

        }


void    frame_display() {

        char tmp1[8196], tmp2[8196];

	int hsz, vsz;

	sprintf(tmp2, "%s/%s", Code_Home, "myimage%d.jpg");

//-----------------------------------------
//              "crop=width:height:x:y"
//-----------------------------------------

	if (rotation == 0 ) { //normal

                int w = frame_width - (int) (cropRight + cropLeft);
               	int h = frame_height - (int) (cropBottom + cropTop);

               	int x = cropLeft;
               	int y = cropTop;

		if (t_position < 0) t_position = 0;

               	sprintf(tmp1,
                       	"ffmpeg -loglevel error -y -accurate_seek -ss %f -i \"%s\" -vf "
			" \"crop=%d:%d:%d:%d,fps=fps=2/1\" -frames:v 4 %s ",

                       	(double) t_position / 1000.0,
                       	SP->CurrentPlay,
                       	w, h, x, y,
                       	tmp2);
	
		hsz = 470; vsz = 320;

		}


	else if (rotation == 90) { // cell phone normal : vertical

                int w = frame_width - (int) (cropRight + cropLeft);
               	int h = frame_height - (int) (cropBottom + cropTop);

               	int x = cropLeft;
               	int y = cropTop;

               	sprintf(tmp1,
                       	"ffmpeg -loglevel error -y -ss %f -i \"%s\" -vf "
			" \"crop=%d:%d:%d:%d,fps=fps=2/1\" -frames:v 4 %s ",

                       	(double) t_position / 1000.0,
                       	SP->CurrentPlay,
                       	h, w, x, y,
                       	tmp2);

		hsz = 470; vsz = 320;

		}

	while (gtk_events_pending ()) gtk_main_iteration ();

	run_command("frame", tmp1);
	system(tmp1);

	if (!gtk_toggle_button_get_active(GTK_TOGGLE_BUTTON(pause_frames)) ){

		gtk_widget_show(frame_image);
		gtk_widget_hide(frame_image1);
		gtk_widget_hide(frame_image2);
		gtk_widget_hide(frame_image3);
		gtk_widget_hide(frame_image4);

		gtk_widget_hide(sel2);
		gtk_widget_hide(sel3);
		gtk_widget_hide(sel4);

		gtk_widget_hide(esel2);
		gtk_widget_hide(esel3);
		gtk_widget_hide(esel4);

		gtk_widget_hide(flbl2);
		gtk_widget_hide(flbl3);
		gtk_widget_hide(flbl4);

		hsz = 800; vsz = 600;

                sprintf(tmp2, "%s/%s", Code_Home, "myimage1.jpg");
//printf("wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww %d %d\n", hsz, vsz);
                albumImage(frame_image, tmp2, hsz, vsz);

		sprintf(tmp1, "Frame 1 Time = %.2f", (t_position / 1000.0));
		gtk_label_set_text(flbl1, tmp1);
		gtk_widget_show(flbl1);
		gtk_widget_show(sel1);
		gtk_widget_show(esel1);

		}

	else {

		gtk_widget_hide(frame_image);
		gtk_widget_show(frame_image1);
		gtk_widget_show(frame_image2);
		gtk_widget_show(frame_image3);
		gtk_widget_show(frame_image4);

		gtk_widget_show(sel1);
		gtk_widget_show(sel2);
		gtk_widget_show(sel3);
		gtk_widget_show(sel4);

		gtk_widget_show(esel1);
		gtk_widget_show(esel2);
		gtk_widget_show(esel3);
		gtk_widget_show(esel4);

		gtk_widget_show(flbl1);
		gtk_widget_show(flbl2);
		gtk_widget_show(flbl3);
		gtk_widget_show(flbl4);

                sprintf(tmp2, "%s/%s", Code_Home, "myimage1.jpg");
                albumImage(frame_image1, tmp2, hsz, vsz);

		sprintf(tmp1, "Frame 1 Time = %.2f", (t_position / 1000.0));
		gtk_label_set_text(flbl1, tmp1);
		gtk_widget_show(flbl1);

                sprintf(tmp2, "%s/%s", Code_Home, "myimage2.jpg");
                albumImage(frame_image2, tmp2, hsz, vsz);

		sprintf(tmp1, "Frame 2 Time = %.2f", (t_position + 500) / 1000.0);
		gtk_label_set_text(flbl2, tmp1);
		gtk_widget_show(flbl2);

                sprintf(tmp2, "%s/%s", Code_Home, "myimage3.jpg");
                albumImage(frame_image3, tmp2, hsz, vsz);

		sprintf(tmp1, "Frame 3 Time = %.2f", (t_position + 1000) / 1000.0);
		gtk_label_set_text(flbl3, tmp1);
		gtk_widget_show(flbl3);

                sprintf(tmp2, "%s/%s", Code_Home, "myimage4.jpg");
                albumImage(frame_image4, tmp2, hsz, vsz);

		sprintf(tmp1, "Frame 4 Time = %.2f", (t_position + 1500) / 1000.0);
		gtk_label_set_text(flbl4, tmp1);
		gtk_widget_show(flbl4);


		gtk_widget_show(sel1);
		gtk_widget_show(sel2);
		gtk_widget_show(sel3);
		gtk_widget_show(sel4);
		
		gtk_widget_show(esel1);
		gtk_widget_show(esel2);
		gtk_widget_show(esel3);
		gtk_widget_show(esel4);

		}

	char tmp[128];

	time_t t2 = libvlc_media_player_get_length(mediaPlayer) / 1000;  // duration

        sprintf(tmp,"%.02f/%u", (double) t_position / 1000.0, t2);

        gtk_label_set_text(GTK_LABEL(posLbl), tmp);    // update label

        return;
        }

void	on_sel1_clicked(GtkWidget *w) {

        if (!mediaPlayer) return;

	clip_start = t_position;

        ignore_me = 1;

        gtk_adjustment_set_value(adjustment22, clip_start/1000.0);

        gtk_widget_queue_draw (clip_markers);

        while (gtk_events_pending ()) gtk_main_iteration ();

		}

void	on_sel2_clicked(GtkWidget *w) {

        if (!mediaPlayer) return;

	clip_start = t_position + 500;

        ignore_me = 1;

        gtk_adjustment_set_value(adjustment22, clip_start/1000.0);

        gtk_widget_queue_draw (clip_markers);

        while (gtk_events_pending ()) gtk_main_iteration ();

		}

void	on_sel3_clicked(GtkWidget *w) {

        if (!mediaPlayer) return;

	clip_start = t_position + 1000;

        ignore_me = 1;

        gtk_adjustment_set_value(adjustment22, clip_start/1000.0);

        gtk_widget_queue_draw (clip_markers);

        while (gtk_events_pending ()) gtk_main_iteration ();

		}

void	on_sel4_clicked(GtkWidget *w) {

        if (!mediaPlayer) return;

	clip_start = t_position + 1500;

        ignore_me = 1;

        gtk_adjustment_set_value(adjustment22, clip_start/1000.0);

        gtk_widget_queue_draw (clip_markers);

        while (gtk_events_pending ()) gtk_main_iteration ();

		}



void	on_esel1_clicked(GtkWidget *w) {

        if (!mediaPlayer) return;

	clip_end = t_position;

        ignore_me = 1;

        gtk_adjustment_set_value(adjustment23, clip_end/1000.0);

        gtk_widget_queue_draw (clip_markers);

        while (gtk_events_pending ()) gtk_main_iteration ();

		}

void	on_esel2_clicked(GtkWidget *w) {

        if (!mediaPlayer) return;

	clip_end = t_position + 500;

        ignore_me = 1;

        gtk_adjustment_set_value(adjustment23, clip_end/1000.0);

        gtk_widget_queue_draw (clip_markers);

        while (gtk_events_pending ()) gtk_main_iteration ();

		}

void	on_esel3_clicked(GtkWidget *w) {

        if (!mediaPlayer) return;

	clip_end = t_position + 1000;

        ignore_me = 1;

        gtk_adjustment_set_value(adjustment23, clip_end/1000.0);

        gtk_widget_queue_draw (clip_markers);

        while (gtk_events_pending ()) gtk_main_iteration ();

		}

void	on_esel4_clicked(GtkWidget *w) {

        if (!mediaPlayer) return;

	clip_end = t_position + 1500;

        ignore_me = 1;

        gtk_adjustment_set_value(adjustment23, clip_end/1000.0);

        gtk_widget_queue_draw (clip_markers);

        while (gtk_events_pending ()) gtk_main_iteration ();

	}
